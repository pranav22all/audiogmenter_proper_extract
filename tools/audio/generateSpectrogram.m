%% generateSpectrogram.m
% This function uses the Large Time-Frequency Analysis Toolbox (LTFAT),
% available at <http://ltfat.github.io/> and the Auditory Toolbox Version 2
%available at http://cobweb.ecn.purdue.edu/~malcolm/interval/1998-010/.

function spect = generateSpectrogram(Im, fs, n, method)
% GENERATESPECTROGRAM converts the augmented audio signals generated by
% CreateDataAUGFromAudio.m into spectrograms using the function sgram.m 
% included in the The Large Time-Frequency Analysis (LTFAT) Toolbox 
% available at http://ltfat.github.io/ and included in .tools/audio/ltfat
%
% sgram.m computes the spectrogram of an audio signal using a Discrete
% Gabor Transform (DGT) and it is located in .tools/images/ltfat/gabor
%
%
% IN THIS SCRIPT EACH AUDIO SIGNAL IS SHORTENED TO n SECONDS.
%
%   spectroResized = generateSpectrogram(Im, fs, n)
%
%   Input
%   Im contains the augmented audio signals generated by
%       CreateDataAUGFromAudio.m
%
%   fs contains the sampling rates for the signals included in Im
%
%   n is the length of the signal (in seconds). If it is too short, it is
%   padded with zeros, otherwise it is cut (optional)
%
%   method is a string the detrmines how the spectrogram is extracted. It
%   has 4 different options: gammatonegram, melSpectrogram, cochleagram,
%   gabor.
%
%   Output
%   spect contains the spectrograms of each audio signal included in Im.     

if nargin < 3
    % set n to zero
    n = 0;
end

%default method is gabor
if nargin < 4
    method = 'gabor';
end

if isa(Im,'cell')
    nSamples = length(Im);
    singleInput = false;
else      %the data is a single signal
    singleInput = true;
    Im = {Im};
    fs = {fs};
    nSamples = 1;
end

parfor j=1:nSamples
    %check if the audio signal is not correctly stored
    if size(Im{j},1) < 19 && size(Im{j},2) > 19
        Im{j} = Im{j}';
    end
    if n == 0
        signal = Im{j}(:,1)
    elseif size(Im{j},1) > fs{j}*n
        signal = Im{j}(1:fs{j}*n,1);            % shortened to n seconds
    else
        signal = Im{j}(:,1); 
        signal(end+1:fs{j}*n) = 0;              % padded to n seconds
    end
    spect{j} = getSpectro(signal,fs{j},method);
end

if singleInput
    spect = spect{1};
end

end

function spect = getSpectro(signal, fs, method)
    
if strcmp(method, 'gammatonegram') 
    spect = gammatonegram(signal,fs);
    
elseif strcmp(method, 'cochleagram')
    spect = cochleagram(signal, fs);
    
elseif strcmp(method, 'melSpectrogram')
    spect = melSpectrogram(signal, fs);
 
elseif strcmp(method, 'gabor')
    % default
    spect = single(sgram(signal, fs));
end
end
